@using Domain.Core.Model.Enums
@model smart_home_web.Models.GraphViewModel

<link href="~/lib/bootstrap/dist/css/bootstrap.css" rel="stylesheet" />
<link href="~/lib/nice-select/dist/css/nice-select.css" rel="stylesheet" />
<style>
    .graph-label {
        color: #333333;
        font-size: 32px;
        font-weight: normal;
        line-height: 40px;
        margin: 20px 0;
        text-align : center;
    }
</style>
<body>
    <div class="row">
        <div class="col-lg-12">
            @if (Model.IsCorrect)
            {
                <div id="container" style="min-width:310px; height:400px; margin:0 auto"></div>
            }
            else
            {
                <label class="control-label graph-label">There is no history measurement for such sensor for that period of time.</label>
            }
            <form asp-action="Graph" asp-controller="History" method="post">
                <div class="form-group">
                    <label class="control-label" style="margin-top:20px;">
                        Select measurement period:
                    </label>
                    <div style="margin-bottom:50px">
                        <select asp-for="Days" class="nice-select col-lg-4 col-md-5 col-sm-6 col-xs-12">
                            <option value="none" selected disabled hidden>
                                Select an Option
                            </option>
                            <option value="1">1 day</option>
                            <option value="7">7 days</option>
                            <option value="14">14 days</option>
                            <option value="30">30 days</option>
                            <option value="90">90 days</option>
                            <option value="99999">For all time</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <input type="hidden" asp-for="SensorId" value="@Model.SensorId" />
                </div>
                <div class="form-group">
                    <input type="submit" value="Choose" class="btn btn-success text-center" style="width:15%" />
                </div>
            </form>
        </div>
    </div>
</body>

@section Scripts {
    <script src="https://code.jquery.com/jquery-2.1.4.js"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="~/lib/nice-select/dist/js/jquery.nice-select.min.js"></script>
    <script>
        $(document).ready(function () {
            $('select').niceSelect();
        });
    </script>
    <script>
        $('#container').highcharts({
            title: {
                text: 'Graph of measurements (for '
                    + (@Model.Days== 99999 ? ' all time' : @Model.Days== 1 ? JSON.parse('@Html.Raw(Json.Serialize(@Model.Days))') + ' day' : JSON.parse('@Html.Raw(Json.Serialize(@Model.Days))')+ ' days')
                    + ') of a sensor with name : ' + JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorName))'),
                x: -20 //center
            },
            subtitle: {
                text:'Sensor type: '+ JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorType))'),
                x: -20
            },
            xAxis: {
                categories: JSON.parse('@Html.Raw(Json.Serialize(@Model.StringDates))')
            },
            yAxis: {
                title: {
                    text: JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorType))')
                        @if (Model.MeasurmentType != MeasurmentType.String)
                         {
                            <text>
                           + ' ' + JSON.parse('@Html.Raw(Json.Serialize(@Model.MeasurmentName))')
                            </text>
                         }
                },
            },
            tooltip: {
                formatter: function () {
                    @switch (Model.MeasurmentType)
                    {
                        case MeasurmentType.Int:
                        case MeasurmentType.Double:

                            <text>
                            var result = '<b>' + this.x + '</b><br>' + this.series.name + ': <b>' + this.y + ' '
                            + JSON.parse('@Html.Raw(Json.Serialize(@Model.MeasurmentName))') + '</b><br>'
                            return result;
                            </text>
                            break;

                        case MeasurmentType.Bool:

                            <text>
                            var boolValues = JSON.parse('@Html.Raw(Json.Serialize(@Model.BoolValues))')
                            var result = '<b>' + this.x + '</b><br>' + this.series.name + ': <b>' + boolValues[this.point.index] + '</b><br>'
                            return result;
                            </text>
                            break;

                        case MeasurmentType.String:

                            <text>
                            var stringValues = JSON.parse('@Html.Raw(Json.Serialize(@Model.StringValues))')
                            var result = '<b>' + this.x + '</b><br>' + this.series.name + ': <b>' + stringValues[this.point.index] + '</b><br>'
                            return result;
                            </text>
                            break;

                        default:
                            break;
                     }
            }
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle',
                borderWidth: 1
            },
            series: [{
                name: JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorType))'),
                @switch (Model.MeasurmentType)
                {
                    case MeasurmentType.Int:
                    case MeasurmentType.String:
                    case MeasurmentType.Bool:
                        <text>
                        data: JSON.parse('@Html.Raw(Json.Serialize(@Model.IntValues))')
                        </text>
                        break;

                    case MeasurmentType.Double:
                        <text>
                        data: JSON.parse('@Html.Raw(Json.Serialize(@Model.DoubleValues))')
                        </text>
                        break;

                    default:
                        break;
                }
            }]
        });
    </script>
}




