@using Domain.Core.Model.Enums
@model smart_home_web.Models.GraphViewModel

<div id="container" style="min-width:310px; height:400px; margin:0 auto"></div>
<script src="https://code.jquery.com/jquery-2.1.4.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>

<script>
        $('#container').highcharts({
            title: {
                text: 'Graph of measurements of a sensor with name : ' + JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorName))'),
                x: -20 //center
            },
            subtitle: {
                text: 'Sensor type: '+ JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorType))'),
                x: -20
            },
            xAxis: {
                categories: JSON.parse('@Html.Raw(Json.Serialize(@Model.StringDates))')
            },
            yAxis: {
                title: {
                    text: JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorType))')
                        @if (Model.MeasurmentType != MeasurmentType.String)
                         {
                            <text>
                           + ' ' + JSON.parse('@Html.Raw(Json.Serialize(@Model.MeasurmentName))')
                            </text>
                         }
                },
            },
            tooltip: {
                formatter: function () {
                    @switch (Model.MeasurmentType)
                    {
                        case MeasurmentType.Int:
                        case MeasurmentType.Double:

                            <text>
                            var result = '<b>' + this.x + '</b><br>' + this.series.name + ': <b>' + this.y + ' '
                            + JSON.parse('@Html.Raw(Json.Serialize(@Model.MeasurmentName))') + '</b><br>'
                            return result;
                            </text>
                            break;

                        case MeasurmentType.Bool:

                            <text>
                            var boolValues = JSON.parse('@Html.Raw(Json.Serialize(@Model.BoolValues))')
                            var result = '<b>' + this.x + '</b><br>' + this.series.name + ': <b>' + boolValues[this.point.index] + '</b><br>'
                            return result;
                            </text>
                            break;

                        case MeasurmentType.String:

                            <text>
                            var stringValues = JSON.parse('@Html.Raw(Json.Serialize(@Model.StringValues))')
                            var result = '<b>' + this.x + '</b><br>' + this.series.name + ': <b>' + stringValues[this.point.index] + '</b><br>'
                            return result;
                            </text>
                            break;

                        default:
                            break;
                     }
            }
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle',
                borderWidth: 1
            },
            series: [{
                name: JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorType))'),
                @switch (Model.MeasurmentType)
                {
                    case MeasurmentType.Int:
                    case MeasurmentType.String:
                    case MeasurmentType.Bool:
                        <text>
                        data: JSON.parse('@Html.Raw(Json.Serialize(@Model.IntValues))')
                        </text>
                        break;

                    case MeasurmentType.Double:
                        <text>
                        data: JSON.parse('@Html.Raw(Json.Serialize(@Model.DoubleValues))')
                        </text>
                        break;

                    default:
                        break;
                }
            }]
        });
</script>
