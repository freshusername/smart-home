@using smart_home_web.Models.History;
@using Infrastructure.Business.DTOs;
@using Domain.Core.Model.Enums;

@model AllHistoriesViewModel;


@{
    ViewData["Title"] = "Detail";
}

<h2><b>@Model.Histories.First().SensorName</b> Detail</h2>
<body>
    <div class="row text-center">
        <table class="table table-hover table-responsive">
            <caption>List of invalid sensors</caption>
            <thead class="thead-dark">
                <tr>
                    <th scope="col" class=" text-center">
                        @{
                            var sensor = (FilterDTO)Model.FilterDTO.Clone();
                            sensor.sortState = (sensor.sortState == SortState.HistoryAsc) ? SortState.HistoryDesc : SortState.HistoryAsc;
                            sensor.sensorId = Model.Histories.First().Id;
                        }
                        <a href="@Url.Action("Detail", "History",
                                        sensor,
                                        null)">
                            Id <i class="glyphicon glyphicon-sort"></i>
                        </a>
                    </th>

                    <th scope="col" class=" text-center">
                        @{
                            var date = (FilterDTO)Model.FilterDTO.Clone();
                            date.sortState = (sensor.sortState == SortState.DateAsc) ? SortState.DateDesc : SortState.DateAsc;
                            sensor.sensorId = Model.Histories.First().Id;
                        }
                        <a href="@Url.Action("Detail", "History",
                                        date,
                                        null)">
                            Date <i class="glyphicon glyphicon-sort"></i>
                        </a>
                    </th>

                    <th scope="col" class=" text-center">
                        @*<a class="menu-toggle text-center" asp-action="Detail" asp-route-sortState="@ViewBag.StringSort">
                                Value <i class="glyphicon glyphicon-sort"></i>
                            </a>*@
                        Value
                    </th>


                </tr>
            </thead>
            <tbody class="text-center">
                @foreach (var history in Model.Histories)
                {
                    <tr>
                        <td scope="row">@history.Id</td>
                        <td>@history.Date.DateTime.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        @{ if (history.Value.ToString() == "False")
                            {
                                <td>Inactive</td>
                            }
                            else if (history.Value.ToString() == "True")
                            {
                                <td>Active</td>
                            }
                            else
                            {
                                <td>@history.Value</td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
        <br />
        @*<nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">
                    @if (Model.FilterDTO != null)
                    {
                        @if (Model.FilterDTO.HasPrevious)
                        {
                            <li class="page-item">
                                @{
                                    var prev = (FilterDTO)Model.FilterDTO.Clone();
                                    prev.CurrentPage = Model.FilterDTO.CurrentPage - 1;
                                }

                                @Html.ActionLink("prev", "Detail", "History", null, null, null,
                                          prev,
                                          null)
                            </li>
                        }

                        @for (var i = 1; i <= Model.FilterDTO.PagesCount; i++)
                        {
                            var page_i = (FilterDTO)Model.FilterDTO.Clone();
                            page_i.CurrentPage = i;

                            <li class="page-item @( i == Model.FilterDTO.CurrentPage ? "active" : "")">
                                @Html.ActionLink(i.ToString(), "Detail", "History", null, null, null,
                                    page_i,
                                    null)
                            </li>
                        }
                        @if (Model.FilterDTO.HasNext)
                        {
                            <li class="page-item">
                                @{
                                    var next = (FilterDTO)Model.FilterDTO.Clone();
                                    next.CurrentPage = Model.FilterDTO.CurrentPage + 1;
                                }

                                @Html.ActionLink("next", "Detail", "History", null, null, null,
                                          next,
                                          null)
                            </li>
                        }
                    }
                </ul>
            </nav>*@
        @*<partial name="_PaginationView" />*@
    </div>
</body>