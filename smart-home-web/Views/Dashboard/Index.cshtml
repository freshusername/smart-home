@using smart_home_web.Models.Dashboard;
@model DashboardIndexViewModel;
@{
    ViewData["Title"] = "Dashboards";
}

@*<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />*@

@*WRAPPER*@
<div class="app-main">
    <div class="app-main__outer">
        <div class="app-inner-layout app-inner-layout-page">
            <div class="app-inner-layout__wrapper">
                <div class="app-inner-layout__content">

                    @*BODY*@
                    <div class="row tab-content">
                        <div class="container-fluid">

                            <div class="row justify-content-center" ">

                                @*<div id="no_dashboards" class="hidden">
                                        <h2>No public dashboards.</h2>
                                    </div>*@

                                <div class="d-flex justify-content-center flex-wrap aligh-content-center" id="dashboards">

                                    @foreach (var dashboard in Model.Dashboards)
                                    {
                                        <div class="col-md-6 col-lg-3 dash_element" data-dashboard-id="@dashboard.Id.ToString()">
                                            @await Component.InvokeAsync("DashboardElement", new { model = dashboard })
                                        </div>
                                    }
                                </div>
                            </div>

                            @*NEW DASHBOARD CREATING*@
                            <div class="d-flex justify-content-center">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <div class="button-center">
                                        <a class="btn btn-success dashboard-create">
                                            <i class="fas fa-plus-circle"> </i> Add new dashboard
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                        @await Component.InvokeAsync("Modals");
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script>

        $(function () {

            function no_dashboards_show() {
                if ($("#dashboards").children(".dash_element").length == 0) {
                    $("#no_dashboards").show();
                }
            }
            no_dashboards_show();

            let currentElement = null;
            const modal = $("#modalWindow");
            const modalBody = modal.find(".modal-body");
            $(".sensor-edit").click(SensorEdit);
            $(".sensor-create").click(SensorCreate);
            $(".sensor-delete").click(SensorDeleteConfirm);
            NoValuesDisplay();

            function NoValuesDisplay() {
                let row = $(".no-values-row");
                if (row.siblings().length > 0) {
                    row.hide();
                } else {
                    row.show();
                }
            }

            function SensorEdit() {
                currentElement = $(this).closest(".sensor-row");
                modal.modal("hide");
                $.ajax({
                    url: '@Url.Action("Edit","Sensor")',
                    data: { id: currentElement.data("sensor-row-id") },
                    beforeSend: function () {
                        modal.fadeIn(600);
                        return true;
                    },
                    success: function (data) {
                        modal.find(".modal-title").text("Edit Sensor");
                        modalBody.prepend(data);
                        modalBody.on("submit", "#modal-form-edit", ModalFormEditSubmit);
                        modalBody.on("click", ".back-to-list", HideModal);
                        modal.modal("show");
                    },
                    error: function (res) {
                        console.log(res);
                    }
                });
            }

            function SensorCreate() {
                $.ajax({
                    url: '@Url.Action("Create","Sensor")',
                    beforeSend: function () {
                        modal.fadeIn(600);
                        return true;
                    },
                    success: function (data) {
                        modal.find(".modal-title").text("Create Sensor");
                        modalBody.prepend(data);
                        modalBody.on("submit", "#modal-form-create", ModalFormCreateSubmit);
                        modalBody.on("click", ".back-to-list", HideModal);
                        modal.modal("show");
                    },
                    error: function (res) {
                        console.log(res);
                    }
                });
            }

            function SensorDeleteConfirm() {
                currentElement = $(this).closest(".sensor-row");
                modal.find(".modal-title").text("Are you sure ?");
                $("#modal-delete-confirm").clone().prependTo(modalBody);
                $("#modal-delete-confirm").show(0);
                $("#modal-delete-button").data("sensor-type-id", currentElement.data("sensor-row-id"));
                modalBody.on("click", "#modal-delete-button", SensorTypeDelete);
                modal.fadeIn(600);
                modal.modal("show");
            }

            function SensorTypeDelete() {
                $.ajax({
                    url: '@Url.Action("Delete","Sensor")',
                    data: { Id: $(this).data("sensor-id") },
                    beforeSend: function () {
                        modal.modal("hide");
                        currentElement.hide(800, function () {
                            currentElement.remove();
                            NoValuesDisplay();
                        });
                        return true;
                    },
                    error: function (res) {
                        console.log(res);
                    }
                });
            }

            function ModalFormCreateSubmit() {
                event.preventDefault();
                var inputFile = $(this).find(".modal-form-file");
                var form = document.getElementById($(this).attr("id"));
                var fd = new FormData(form);
                fd.append('IconFile', inputFile.prop('files')[0]);
                $.ajax({
                    url: '@Url.Action("Create","Sensor")',
                    method: "POST",
                    processData: false,
                    contentType: false,
                    data: fd,
                    beforeSend: function () {
                        modal.modal("hide");
                        return true;
                    },
                    success: function (data) {
                        tableBody.prepend(data);
                        tableBody.on("click", ".sensor-edit", SensorEdit);
                        tableBody.on("click", ".sensor-delete", SensorDeleteConfirm);
                        tableBody.on("click", ".fa-eye-slash", toggleEyeIcon);
                        tableBody.on("click", ".input-set-active", SetActiveAjax);
                        tableBody.on("click", ".input-set-active", SetActiveAjax);
                        NoValuesDisplay();
                    },
                    error: function (res) {
                        console.log(res);
                    }
                })
            }

            function ModalFormEditSubmit() {
                event.preventDefault();
                var inputFile = $(this).find(".modal-form-file");
                var form = document.getElementById($(this).attr("id"));
                var fd = new FormData(form);
                fd.append('IconFile', inputFile.prop('files')[0]);

                $.ajax({
                    url: '@Url.Action("Edit","Sensor")',
                    method: "POST",
                    processData: false,
                    contentType: false,
                    data: fd,
                    beforeSend: function () {
                        modal.modal("hide");;
                        currentElement.hide(800);
                        return true;
                    },
                    success: function (data) {
                        currentElement.replaceWith(data);
                        currentElement.show(800);
                        tableBody.on("click", ".sensor-edit", SensorEdit);
                        tableBody.on("click", ".sensor-delete", SensorDeleteConfirm);
                        tableBody.on("click", ".fa-eye-slash", toggleEyeIcon);
                        tableBody.on("click", ".input-set-active", SetActiveAjax);
                    },
                    error: function (res) {
                        console.log(res);
                    }
                });
            }

            function HideModal() {
                modal.modal("hide");
            }

            modal.on('hidden.bs.modal', function () {
                modalBody.empty();
                $(this).find(".modal-title").empty();
            });
        });
    </script>
