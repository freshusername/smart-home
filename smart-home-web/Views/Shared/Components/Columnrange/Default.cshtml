@model smart_home_web.Models.ReportElements.ReportElementViewModel;
@using Domain.Core.Model.Enums

@if (Model.IsCorrect)
{
    <figure class="highcharts-figure">
        <div id="@("Columnrange"+Model.Id.ToString())"></div>
    </figure>
}
else
{
    <label class="control-label graph-label">@Model.Message <a class="btn btn-success text-center" asp-controller="ReportElement" asp-action="EditReportElement" asp-route-id="@Model.Id"><i class="fas fa-cog"></i></a></label>
}

<script>
    columnminvalues = JSON.parse('@Html.Raw(Json.Serialize(@Model.MinValues))');
    columnmaxvalues = JSON.parse('@Html.Raw(Json.Serialize(@Model.MaxValues))');
    columndates = JSON.parse('@Html.Raw(Json.Serialize(@Model.Dates))');

    let columntemperatures = [];
    for (let i = 0; i < columndates.length;i++) {
        columntemperatures.push([columnminvalues[i],columnmaxvalues[i]])
    }
    Highcharts.chart('Columnrange'+JSON.parse('@Html.Raw(Json.Serialize(@Model.Id.ToString()))'), {

        chart: {
            type: 'columnrange',
            inverted: true,
        },
        title: {
            text: 'Column range for <b>' + JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorName))') + '</b> for <b>' + JSON.parse('@Html.Raw(Json.Serialize(@Model.DashboardName))') + '</b>'
        },

        xAxis: {
            title: {
                style: {
                    textTransform: 'uppercase'
                },
                text: 'dates'
            },
            categories: columndates
        },

        yAxis: {
            minorTickInterval: 'auto',
            title: {
                style: {
                    textTransform: 'uppercase'
                },
                text: 'values'
            },
            labels: {
                style: {
                    fontSize: '12px'
                }
            }
        },
        plotOptions: {
            columnrange: {
                dataLabels: {
                    enabled: true
                }
            },
        },

        legend: {
            enabled: false
        },

        series: [{
            name: 'Temperatures',
            data: columntemperatures
        }],
        exporting: {
            buttons: {
                contextButton: {
                    enabled: false,
                },
            }
        },

    });

    $('body').on('gsresizestop', '.grid-stack', function (event, ui) {
        var type = 'Columnrange';
        try {
            var result = Highcharts.charts.find(chart => chart.renderTo.id == (type + ui.id).toString());
        }
        catch (error) {

        }
        if (typeof result !== 'undefined') {
            result.setSize(ui.height, ui.width);
        }
    });
</script>
