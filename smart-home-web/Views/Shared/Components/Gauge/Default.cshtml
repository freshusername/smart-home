@using smart_home_web.Models.ReportElements;
@using Domain.Core.Model.Enums;
@model GaugeViewModel;

<div>
        <figure class="highcharts-figure">
            <div id=@("Gauge"+Model.Id.ToString()) class="chart-container"></div>
        </figure>
        <strong id="alertMessage" class="d-none">Selected sensor does not have values to display in the chosen time period.</strong>
</div>

<script src="https://code.highcharts.com/modules/solid-gauge.js"></script>
<script type="text/javascript">
    
    $(function () {  
        $("form").on("submit", function (e) {
            e.preventDefault(); 
            var gaugeViewModel = new Object();  
            gaugeViewModel.Id = $('#id').val();  
            gaugeViewModel.Hours = $('#hours').val();   
            if (gaugeViewModel != null) {  
                $.ajax({
                    type: "PUT",  
                    url: '@Url.Action("UpdateGaugeHours", "Gauge")',  
                    data: JSON.stringify(gaugeViewModel),  
                    contentType: "application/json; charset=utf-8",  
                    dataType: "json",  
                    success: function(response) {  
                        if (response != null) {
                            alert(response.responseText);  
                        } else {  
                            alert("Something went wrong");  
                        }  
                    },  
                    failure: function(response) {  
                        alert(response.responseText);  
                    },  
                    error: function(response) {  
                        alert(response.responseText);  
                    }  
                });  
            }  
        });  
    });

</script>

<script>
    var gaugeOptions = {
        chart: {
            type: 'solidgauge'
        },

        title: null,

        pane: {
            center: ['50%', '85%'],
            size: '140%',
            startAngle: -90,
            endAngle: 90,
            background: {
                backgroundColor:
                    Highcharts.defaultOptions.legend.backgroundColor || '#EEE',
                innerRadius: '60%',
                outerRadius: '100%',
                shape: 'arc'
            }
        },

        exporting: {
            enabled: false
        },

        tooltip: {
            enabled: false
        },

        // the value axis
        yAxis: {
            stops: [
                [0.1, '#55BF3B'], // green
                [0.5, '#DDDF0D'], // yellow
                [0.9, '#DF5353'] // red
            ],
            lineWidth: 0,
            tickWidth: 0,
            minorTickInterval: null,
            startOnTick: false,
            tickAmount: 2,
            title: {
                y: -70
            },
            labels: {
                y: 16
            }
        },

        plotOptions: {
            solidgauge: {
                dataLabels: {
                    y: 5,
                    borderWidth: 0,
                    useHTML: true
                }
            }
        }
    };

    var gaugeChart = Highcharts.chart('Gauge'+JSON.parse('@Html.Raw(Json.Serialize(@Model.Id.ToString()))'), Highcharts.merge(gaugeOptions, {
        yAxis: {
            min: @Model.Min,
            max: @Model.Max,
            tickPositions: [@Model.Min, @Model.Max],
            title: {
                text: '@Model.SensorName'
            }
        },

        credits: {
            enabled: false
        },

        series: [{
            name: '@Model.SensorName',
            data: [@Model.Value],
            dataLabels: {
                format:
                    '<div style="text-align:center">' +
                    '<span style="font-size:25px">{y}</span><br/>' +
                    '<span style="font-size:12px;opacity:0.4">@Model.MeasurementName</span>' +
                    '</div>'
            },
            tooltip: {
                valueSuffix: ' @Model.MeasurementName'
            }
        }]

    }));

    // Bring life to the dials
    setInterval(function () {
        var point,
            newVal,
            inc;
        $.ajax({
        type: "GET",
        url: "/api/Gauge/GetGauge/@Model.Id",
        contentType: "application/json; charset=utf-8",
            success: function (res) {
                if (gaugeChart) {
                    if (res.isValid === true) {
                        point = gaugeChart.series[0].points[0];
                        point.update(res.value);
                        gaugeChart.yAxis[0].update({
                            min: res.min,
                            max: res.max
                        });
                        gaugeChart.yAxis[0].tickPositions = [res.min, res.max];
                        gaugeChart.yAxis[0].update({
                            tickPositions: gaugeChart.yAxis[0].tickPositions
                        });
                        $('#gauge_figure_'+JSON.parse('@Html.Raw(Json.Serialize(@Model.Id.ToString()))')).addClass("d-inline").removeClass("d-none");
                        $('#alertMessage').addClass("d-none").removeClass("d-inline");
                    }
                    else {
                        $('#gauge_figure_'+JSON.parse('@Html.Raw(Json.Serialize(@Model.Id.ToString()))')).addClass("d-none").removeClass("d-inline");
                        $('#alertMessage').addClass("d-inline").removeClass("d-none");
                    }
                }
            }
        });
    }, 2000);

    $('body').on('gsresizestop', '.grid-stack', function (event, ui) {
        var type = 'Gauge';
        var result = Highcharts.charts.find(chart => chart.renderTo.id == (type + ui.id).toString());
        if (typeof result !== 'undefined') {
            result.setSize(ui.height, ui.width);
        }
        
    });
</script>
