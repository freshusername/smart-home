@using smart_home_web.Models.ReportElements;
@model GaugeViewModel;
@if (Model.IsValid)
{
<div>
    <link href="~/css/gauge.css" rel="stylesheet" />
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/highcharts-more.js"></script>
    <script src="https://code.highcharts.com/modules/solid-gauge.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
</div>
<div>
    <h2>Gauge component</h2>
    <figure class="highcharts-figure">
        <div id="container" class="chart-container"></div>
    </figure>
</div>

<script>
    var gaugeOptions = {
        chart: {
            type: 'solidgauge'
        },

        title: null,

        pane: {
            center: ['50%', '85%'],
            size: '140%',
            startAngle: -90,
            endAngle: 90,
            background: {
                backgroundColor:
                    Highcharts.defaultOptions.legend.backgroundColor || '#EEE',
                innerRadius: '60%',
                outerRadius: '100%',
                shape: 'arc'
            }
        },

        exporting: {
            enabled: false
        },

        tooltip: {
            enabled: false
        },

        // the value axis
        yAxis: {
            stops: [
                [0.1, '#55BF3B'], // green
                [0.5, '#DDDF0D'], // yellow
                [0.9, '#DF5353'] // red
            ],
            lineWidth: 0,
            tickWidth: 0,
            minorTickInterval: null,
            tickAmount: 2,
            title: {
                y: -70
            },
            labels: {
                y: 16
            }
        },

        plotOptions: {
            solidgauge: {
                dataLabels: {
                    y: 5,
                    borderWidth: 0,
                    useHTML: true
                }
            }
        }
    };

    var gaugeChart = Highcharts.chart('container', Highcharts.merge(gaugeOptions, {
        yAxis: {
            min: @Model.Min,
            max: @Model.Max,
            title: {
                text: '@Model.SensorName'
            }
        },

        credits: {
            enabled: false
        },

        series: [{
            name: '@Model.SensorName',
            data: [@Model.Min],
            dataLabels: {
                format:
                    '<div style="text-align:center">' +
                    '<span style="font-size:25px">{y}</span><br/>' +
                    '<span style="font-size:12px;opacity:0.4">@Model.MeasurementName</span>' +
                    '</div>'
            },
            tooltip: {
                valueSuffix: ' @Model.MeasurementName'
            }
        }]

    }));

    // Bring life to the dials
    setInterval(function () {
        var point,
            newVal,
            inc;

        if (gaugeChart) {
            point = gaugeChart.series[0].points[0];
            inc = Math.round((Math.random()-@Model.Min)*@Model.Max);
            newVal = point.y + inc;

            if (newVal < @Model.Min || newVal > @Model.Max) {
                newVal = point.y - inc;
            }

            point.update(newVal);
        }

    }, 2000);

</script>
}
else
{
    <h1>Selected sensor does not have values to display in the selected time period.</h1>
}