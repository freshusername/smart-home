@model smart_home_web.Models.ReportElements.HeatmapViewModel;
@using Domain.Core.Model.Enums;

<link rel="stylesheet" href="~/css/heatmap.css" />
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/heatmap.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<figure class="highcharts-figure">
    <div id="container"></div>
</figure>
<script>
        @switch (Model.MeasurementType)
            {
                case MeasurementType.Int:
                    <text>
                    values = JSON.parse('@Html.Raw(Json.Serialize(@Model.Values))')
                    </text>
                    break;

                case MeasurementType.Double:
                    <text>
                    values = JSON.parse('@Html.Raw(Json.Serialize(@Model.Values))')
                    </text>
                    break;

                default:
                    break;
            }
        function getPointCategoryName(point, dimension) {
            var series = point.series,
                isY = dimension === 'y',
                axis = series[isY ? 'yAxis' : 'xAxis'];
            return axis.categories[point[isY ? 'y' : 'x']];
        }

        Highcharts.chart('container', {

            chart: {
                type: 'heatmap',
                marginTop: 40,
                marginBottom: 80,
                plotBorderWidth: 1
            },


            title: {
                text: 'Average value per weekday for ' + @Html.Raw(Json.Serialize(Model.SensorName))
            },

            xAxis: {
                categories: []
            },

            yAxis: {
                categories: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
                title: null,
                reversed: true
            },

            accessibility: {
                point: {
                    descriptionFormatter: function (point) {
                        var ix = point.index + 1,
                            xName = getPointCategoryName(point, 'x'),
                            yName = getPointCategoryName(point, 'y'),
                            val = point.value;
                        return ix + '. ' + xName + ' sales ' + yName + ', ' + val + '.';
                    }
                }
            },

            colorAxis: {
                min: 0,
                minColor: '#FFFFFF',
                maxColor: Highcharts.getOptions().colors[0]
            },

            legend: {
                align: 'right',
                layout: 'vertical',
                margin: 0,
                verticalAlign: 'top',
                y: 25,
                symbolHeight: 280
            },

            tooltip: {
                formatter: function () {
                    return '<b>' + '</b><br> /Sensors/ average <b>' +
                        this.point.value + '</b><br> on <b>' + getPointCategoryName(this.point, 'y') + ' '
                         + getPointCategoryName(this.point, 'x') + '</b>';
                }
            },

            //HeatmapSeriesData
            series: [{
                name: 'Sales per employee',
                borderWidth: 1,
                data: [[0, 0, @Html.Raw(Json.Serialize(Model.Values.ElementAt(0)))], [0, 1, 19], [0, 2, 8], [0, 3, 24], [0, 4, 67], [0, 5, 1], [0, 6, 1],
                [1, 0, 92], [1, 1, 58], [1, 2, 78], [1, 3, 117], [1, 4, 48], [1, 5, 1], [1, 6, 1],
                [2, 0, 35], [2, 1, 15], [2, 2, 123], [2, 3, 64], [2, 4, 52], [2, 5, 1], [2, 6, 1],
                [3, 0, 72], [3, 1, 132], [3, 2, 114], [3, 3, 19], [3, 4, 16], [3, 5, 1], [3, 6, 1],
                [4, 0, 38], [4, 1, 5], [4, 2, 8], [4, 3, 117], [4, 4, 115], [4, 5, 1], [4, 6, 1],
                [5, 0, 88], [5, 1, 32], [5, 2, 12], [5, 3, 6], [5, 4, 120], [5, 5, 1], [5, 6, 1],
                [6, 0, 13], [6, 1, 44], [6, 2, 88], [6, 3, 98], [6, 4, 96], [6, 5, 1], [6, 6, 1],
                [7, 0, 31], [7, 1, 1], [7, 2, 82], [7, 3, 32], [7, 4, 30], [7, 5, 1], [7, 6, 1],
                ],
                dataLabels: {
                    enabled: true,
                    color: '#000000'
                }
            }],

            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        yAxis: {
                            labels: {
                                formatter: function () {
                                    return this.value.charAt(0);
                                }
                            }
                        }
                    }
                }]
            }

        });
</script>
