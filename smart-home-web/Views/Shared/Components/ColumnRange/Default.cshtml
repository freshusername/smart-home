@model smart_home_web.Models.ReportElements.ReportElementViewModel;
@using Domain.Core.Model.Enums

<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-more.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<link rel="stylesheet" href="~/css/ColumnRange.css">
<link rel="stylesheet" href="~/css/SettingsButton.css">

@if (Model.IsCorrect)
{
    <figure class="highcharts-figure">
        <div id="@("columnrange_container_"+Model.Id.ToString())"></div>
    </figure>
}
else
{
    <label class="control-label graph-label">@Model.Message <a class="btn btn-success text-center" asp-controller="ReportElement" asp-action="EditReportElement" asp-route-id="@Model.Id"><i class="fas fa-cog"></i></a></label>
}

<script>

    columnminvalues = JSON.parse('@Html.Raw(Json.Serialize(@Model.MinValues))');
    columnmaxvalues = JSON.parse('@Html.Raw(Json.Serialize(@Model.MaxValues))');
    columndates = JSON.parse('@Html.Raw(Json.Serialize(@Model.Dates))');

    let columntemperatures = [];
    for (let i = 0; i < columndates.length;i++) {
        columntemperatures.push([columnminvalues[i],columnmaxvalues[i]])
    }
    Highcharts.chart('columnrange_container_'+JSON.parse('@Html.Raw(Json.Serialize(@Model.Id.ToString()))'), {

        chart: {
            events: {
                load: function () {

                    var chart = this,
                        renderer = chart.renderer;
                    var pattern = renderer.createElement('pattern').add(renderer.defs).attr({
                        width: 1,
                        height: 1,
                        id: "image",
                        patternContentUnits: 'userSpaceOnUse'
                    });

                    renderer.image('../images/SettingsButton.svg', 0, 0, 18, 16).add(pattern);

                }
            },
            type: 'columnrange',
            inverted: true,
        },
        title: {
            text: 'Column range for ' + JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorName))') + ' for dashboard ' + JSON.parse('@Html.Raw(Json.Serialize(@Model.DashboardName))')
        },

        xAxis: {
            title: {
                style: {
                    textTransform: 'uppercase'
                },
                text: 'dates'
            },
            categories: columndates
        },

        yAxis: {
            minorTickInterval: 'auto',
            title: {
                style: {
                    textTransform: 'uppercase'
                },
                text: 'values'
            },
            labels: {
                style: {
                    fontSize: '12px'
                }
            }
        },
        plotOptions: {
            columnrange: {
                dataLabels: {
                    enabled: true
                }
            },
        },

        legend: {
            enabled: false
        },

        series: [{
            name: 'Temperatures',
            data: columntemperatures
        }],
        exporting: {
            buttons: {
                Link: {
                    height: 24,
                    width: 24,
                    y: 3,
                    x: -20,
                    className : 'highcharts-button-box-settings',
                    onclick: function () {
                        window.location.href = '/ReportElement/EditReportElement/'+JSON.parse('@Html.Raw(Json.Serialize(@Model.Id.ToString()))')
                    },
                }

            }
        },

    });
</script>
