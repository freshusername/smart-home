@model smart_home_web.Models.ReportElements.BoolHeatmapViewModel;
@using Domain.Core.Model.Enums;

<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/heatmap.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<figure class="highcharts-figure">
    <div id=@("BoolHeatmap" + Model.Id.ToString())></div>
</figure>
@if (Model.IsCorrect)
{
    <script>
        @{
            List<DateTime> daysList = new List<DateTime>();
            List<int?> hoursList = new List<int?>();
            List<int> trueFalseCounts = new List<int>();
            List<int> trueCounts = new List<int>();
            List<decimal?> truePercentages = new List<decimal?>();
            List<string> hoursPeriods = new List<string>();
            List<string> timesOfDayList = new List<string>();

            foreach (var tp in Model.BoolValuePercentagesPerHours)
            {
                truePercentages.Add(tp.TruePercentage);
                hoursList.Add(tp.HourTime);
            }

            for (int i = 0; i < 24; i += 6)
            {
                int? temp = hoursList[i + 5];
                temp++;
                hoursPeriods.Add(hoursList[i].ToString() + " - " + temp.ToString());
            }

            for (int i = 0; i < 24; i += 4)
            {
                timesOfDayList.Add(hoursList[i].ToString()); //TODO: fix
            }

            decimal?[] valArray = truePercentages.ToArray();
            string[] hoursPeriodsArray = hoursPeriods.ToArray();
            string[] timesOfDayArray = timesOfDayList.ToArray();
        }

        function getPointCategoryName(point, dimension) {
            var series = point.series,
                isY = dimension === 'y',
                axis = series[isY ? 'yAxis' : 'xAxis'];
            return axis.categories[point[isY ? 'y' : 'x']];
        }

        var arr = @Html.Raw(Json.Serialize(hoursList));
        //var arr = hoursList;
        function getHourForValue(index) {
            var hourTime = '';
            for (var i = 0; i < arr.length; i++) {
                if (i == index) {
                    hourTime = arr[i];
                }
            }
            var k = parseInt(hourTime);
            k++;
            return hourTime + ":00 - " + k + ":00";
        }

        Highcharts.chart("BoolHeatmap"+JSON.parse('@Html.Raw(Json.Serialize(@Model.Id.ToString()))'), {

            chart: {
                type: 'heatmap',
                marginTop: 40,
                marginBottom: 80,
                plotBorderWidth: 1,
                borderRadius: 72
            },

            title: {
                text: 'True percentage for ' + '@Html.Raw(Json.Serialize(Model.SensorName))' +
                        ' on *Particular date* '
            },

            xAxis: {
                categories:
                    [
                        @for (int i = 0; i < timesOfDayArray.Length; i++)
                        {
                            <text>
                                @Html.Raw(Json.Serialize(timesOfDayArray[i])) ,
                            </text>
                        }
                    ]
            },

            yAxis: {
                categories:
                    [
                        @for (int i = 0; i < hoursPeriodsArray.Length; i++)
                        {
                            <text>
                                @Html.Raw(Json.Serialize(hoursPeriodsArray[i])) ,
                            </text>
                        }
                    ],

                title: null,
                reversed: true
            },

            accessibility: {
                point: {
                    descriptionFormatter: function (point) {
                var ix = point.index + 1,
                    xName = getPointCategoryName(point, 'x'),
                    yName = getPointCategoryName(point, 'y'),
                    val = point.value;
                return ix + '. ' + xName + ' sales ' + yName + ', ' + val + '.';
                    }
                }
            },

            colorAxis: {
                min: 0,
                minColor: '#FFFFFF',
                maxColor: Highcharts.getOptions().colors[0]
            },

            legend: {
                align: 'right',
                layout: 'vertical',
                margin: 0,
                verticalAlign: 'top',
                y: 25,
                symbolHeight: 280
            },

            tooltip: {
                formatter: function () {
                    return '<b>' + '</b><br>' + @Html.Raw(Json.Serialize(Model.SensorName))  +
                        (this.point.value == undefined ? ' has no bool data' : ' has true percentage: <b>' + this.point.value + "% ") +
                            '</b><br> at <b>' + getPointCategoryName(this.point, 'x') + ', ' +
                             getHourForValue(this.point.index) + ' </b>';
                }
            },

            series: [{
                name: 'True percentage per hours for bool sensor',
                borderWidth: 0.1,
                colsize: 0.35,
                rowsize: 0.35,
                data: [
                    @{int h = 0;}
                    @for (int i = 0; i < 4; i++)
                    {
                        @for (int j = 0; j < 6; j++)
                        {
                            <text>
                                [@Html.Raw(Json.Serialize(j)), @Html.Raw(Json.Serialize(i)), @Html.Raw(Json.Serialize(valArray[h++]))],
                            </text>
                        }
                    }
                ],

                dataLabels: {
                    enabled: true,
                    color: '#000000'
                }
            }],

            exporting: {
                buttons: {
                    contextButton: {
                        enabled: false,
                    }
                }
            },

            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        yAxis: {
                            labels: {
                                formatter: function () {
                                    try {
                                        return this.value.charAt(0);
                                    }
                                    catch (error) {

                                    }
                                }
                            }
                        }
                    }
                }]
            }

        });
    </script>
}
else
{
    <h4>No Data for bool heatmap for this period of time</h4>
}
<script>
    $('body').on('gsresizestop', '.grid-stack', function (event, ui) {
        var type = 'BoolHeatmap';
        try {
            var result = Highcharts.charts.find(chart => chart.renderTo.id == (type + ui.id).toString());
        }
        catch (error) {

        }
        if (typeof result !== 'undefined') {
            result.setSize(ui.height, ui.width);
        }
    });
</script>
