@model smart_home_web.Models.ReportElements.BoolHeatmapViewModel;
@using Domain.Core.Model.Enums;

<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/heatmap.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<figure class="highcharts-figure" style="height: 20em; width: 30em; margin: 0 auto">
    <div id=@("BoolHeatmap" + Model.Id.ToString()) style="height: 16em; width: 16em; margin: 0 auto"></div>
</figure>
@if (Model.IsCorrect)
{
    <script>
        @{
            List<string> daysList = new List<string>();
            List<int?> hoursList = new List<int?>();
            List<int> trueFalseCounts = new List<int>();
            List<int> trueCounts = new List<int>();
            List<decimal?> truePercentages = new List<decimal?>();
            List<string> hoursPeriods = new List<string>();
            List<string> timesOfDayList = new List<string>();

            foreach (var tp in Model.BoolValuePercentagesPerHours)
            {
                truePercentages.Add(tp.TruePercentage);
                hoursList.Add(tp.HourTime);
                daysList.Add(tp.DayDate.ToString("dd/MM/yyyy"));
            }

            //for (int i = 0; i < 24; i += 6)
            //{
            //    int? temp = hoursList[i + 5];
            //    temp++;
            //    hoursPeriods.Add(hoursList[i].ToString() + " - " + temp.ToString());
            //}

            //for (int i = 0; i < 24; i += 4)
            //{
            //    timesOfDayList.Add(hoursList[i].ToString()); //TODO: fix
            //}

            decimal?[] valArray = truePercentages.ToArray();
            //string[] hoursPeriodsArray = hoursPeriods.ToArray();
            //string[] timesOfDayArray = timesOfDayList.ToArray();
            string[] daydates = daysList.ToArray();
        }

        function getPointCategoryName(point, dimension) {
            var series = point.series,
                isY = dimension === 'y',
                axis = series[isY ? 'yAxis' : 'xAxis'];
            return axis.categories[point[isY ? 'y' : 'x']];
        }

        var arr = @Html.Raw(Json.Serialize(hoursList));
        function getHourForValue(index) {
            var hourTime = '';
            for (var i = 0; i < arr.length; i++) {
                if (i == index) {
                    hourTime = arr[i];
                }
            }
            var k = parseInt(hourTime);
            k++;
            return hourTime + ":00 - " + k + ":00";
        }

        Highcharts.chart("BoolHeatmap"+JSON.parse('@Html.Raw(Json.Serialize(@Model.Id.ToString()))'), {

            chart: {
                type: 'heatmap',
                marginTop: 40,
                marginBottom: 80,
                plotBorderWidth: 0,
            },

            title: {
                text: ''//'True percentage for ' + 'Html.Raw(Json.Serialize(Model.SensorName))' + ' on *Particular date* '
            },

            xAxis: {
                categories:
                    [
                        @*@for (int i = 0; i < daydates.Length; i++)
                        {
                            <text>
                                @Html.Raw(Json.Serialize(daydates[i])) ,
                            </text>
                        }*@
                    ],
                visible: false
            },

            yAxis: {
                categories:
                    [
                        @*@for (int i = 0; i < hoursPeriodsArray.Length; i++)
                        {
                            <text>
                                @Html.Raw(Json.Serialize(hoursPeriodsArray[i])) ,
                            </text>
                        }*@
                    ],

                title: null,
                reversed: true,
                visible: false
            },

            colorAxis: {
                min: 0,
                max: 100,
                minColor: '#FFFFFF',
                maxColor: '#000000'
            },

            legend: {
            title: {
                text: 'movings/vibration frequency'
            },
            accessibility: {
                keyboardNavigation: {
                    enabled: true
                },
            },
            align: 'right',
            verticalAlign: 'bottom',
            y: 10,
            floating: true,
            borderWidth: 0,
            backgroundColor: 'transparent',
            width: 'auto'
            },

            tooltip: {
                formatter: function () {
                    if (this.point.value == undefined)
                    {
                        return '<b>' + '</b><br>' + @Html.Raw(Json.Serialize(Model.SensorName)) + ' has no bool data </b><br> at <b>' +
                            getPointCategoryName(this.point, 'x') + ' at ' + getHourForValue(this.point.index) + ' </b>';
                    }
                    return '<b>' + '</b><br>' + @Html.Raw(Json.Serialize(Model.SensorName))  + ' has true percentage: <b>' + this.point.value + "% " +
                        '</b><br> at <b>' + getHourForValue(this.point.index) + ' </b>';
                }
            },

            series: [{
                name: 'True percentage per hours for bool sensor',
                borderWidth: 0,
                borderHeight: 0,
                colsize: 0.9,
                rowsize: 0.9,
                pointPadding: 1,
                hide: true,
                data: [
                    @{
                        int h = 0;
                        int g = (int)Math.Ceiling(valArray.Length / 6.0);

                        @for (int i = 0; i < g; i++)
                        {
                            @for (int j = 0; j < 6; j++)
                            {
                                <text>
                                    [@Html.Raw(Json.Serialize(i)), @Html.Raw(Json.Serialize(j)), @Html.Raw(Json.Serialize((h == valArray.Length) ? 1 : valArray[h++]))],
                                </text>

                            }
                        }

                    }
                ],
            }],

            exporting: {
                buttons: {
                    contextButton: {
                        enabled: false,
                    }
                }
            },

            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 50
                    },
                    chartOptions: {
                        yAxis: {
                            labels: {
                                formatter: function () {
                                    try {
                                        return this.value.charAt(0);
                                    }
                                    catch (error) {

                                    }
                                }
                            }
                        }
                    }
                }]
            }
        });
    </script>
}
else
{
    <h4>No Data for bool heatmap for this period of time</h4>
}
<script>
    $('body').on('gsresizestop', '.grid-stack', function (event, ui) {
        var type = 'BoolHeatmap';
        try {
            var result = Highcharts.charts.find(chart => chart.renderTo.id == (type + ui.id).toString());
        }
        catch (error) {

        }
        if (typeof result !== 'undefined') {
            result.setSize(ui.height, ui.width);
        }
    });
</script>
