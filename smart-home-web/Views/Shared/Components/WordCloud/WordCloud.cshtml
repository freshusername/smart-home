@model smart_home_web.Models.ReportElements.ReportElementViewModel;
@using Domain.Core.Model.Enums

<script src="https://code.highcharts.com/modules/wordcloud.js"></script>
@if (Model.IsCorrect)
{
    <figure class="highcharts-figure-wordcloud" width="100%" height="100%">
        <div id=@("Wordcloud"+Model.Id.ToString()) width="100%" height="100%"></div>
    </figure>
}
else
{
    <label class="control-label graph-label">There is no word cloud for such sensor for that period of time.</label>
}

<script>

    values = JSON.parse('@Html.Raw(Json.Serialize(@Model.Values))')
    data = Highcharts.reduce(values, function (arr, word) {
    var obj = Highcharts.find(arr, function (obj) {
        return obj.name === word;
    });
    if (obj) {
        obj.weight += 1;
    } else {
        obj = {
            name: word,
            weight: 1
        };
    arr.push(obj);
    }
    return arr;
    }, []);

    Highcharts.chart("Wordcloud"+JSON.parse('@Html.Raw(Json.Serialize(@Model.Id.ToString()))'), {
        title: {
            text: 'Word cloud for ' + JSON.parse('@Html.Raw(Json.Serialize(@Model.SensorName))') + ' for ' + JSON.parse('@Html.Raw(Json.Serialize(@Model.DashboardName))')
        },
        tooltip: {
            useHTML: true,
            @if (Model.MeasurementType == MeasurementType.Int || Model.MeasurementType == MeasurementType.Double)
            {
                <text>
                    headerFormat: '<span style="font-size: 12px">{point.key} </span>' + JSON.parse('@Html.Raw(Json.Serialize(@Model.MeasurementName))') + '<br />',
                </text>
            }
            else
            {
                <text>
                    headerFormat: '<span style="font-size: 12px">{point.key} </span>' + '<br />',
                </text>
            }
            },
        series: [{
            type: 'wordcloud',
            data: data,
            name: 'Periodicity',
        }],
        exporting: {
            buttons: {
                contextButton: {
                    enabled: false,
                }
            }
        },
    });
    var type = 'Wordcloud';
    function UpdateWordcloud(sensorId, value) {
        if (sensorId ==@Model.SensorId) {
            try {
                var result = Highcharts.charts.find(chart => chart.renderTo.id == (type + @Model.Id).toString());
            }
            catch (error) {

            }
            if (typeof result !== 'undefined') {
                var series = result.series[0];
                var element = series.data.find(ar => ar.name == JSON.parse(value));
                if (typeof element !== 'undefined') {
                    element.weight++;
                    series.addPoint();
                }
                else {
                    series.addPoint({ name: JSON.parse(value), weight: 1 });
                }
            }
        }
    }
</script>

<script>
    $('body').on('gsresizestop', '.grid-stack', function (event, ui) {
        var type = 'Wordcloud';
        try {
            var result = Highcharts.charts.find(chart => chart.renderTo.id == (type + ui.id).toString());
        }
        catch (error) {

        }
        if (typeof result !== 'undefined') {
            result.setSize(ui.height, ui.width);
        }
    });

    
</script>
